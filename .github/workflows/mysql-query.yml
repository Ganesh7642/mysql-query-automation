name: Run MySQL Queries via AWS SSM

on:
  push:
    branches:
      - main

jobs:
  run-mysql-query:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Debug GitHub Secrets
        run: |
          echo "Checking AWS Secrets..."
          echo "AWS_REGION=${{ secrets.AWS_REGION }}"
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}"
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          if [[ -z "${{ secrets.AWS_REGION }}" ]]; then
            echo "ERROR: AWS_REGION is not set!"
            exit 1
          fi

      - name: Verify AWS CLI Installation
        run: |
          if ! command -v aws &> /dev/null; then
            echo "AWS CLI not found, installing..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install --update
          else
            echo "AWS CLI is already installed."
          fi
          aws --version  # Confirm AWS CLI version

      - name: Configure AWS Credentials
        run: |
          aws configure set aws_access_key_id "${AWS_ACCESS_KEY_ID}"
          aws configure set aws_secret_access_key "${AWS_SECRET_ACCESS_KEY}"
          aws configure set region "${AWS_REGION}"
          
      - name: Verify AWS Configuration
        run: |
          echo "AWS_REGION is set to: $AWS_REGION"
          aws sts get-caller-identity  # Verify IAM credentials are correct

          # Get MySQL credentials from AWS Secrets Manager
          SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id mysql_password_setup --query SecretString --output text --region $AWS_REGION)
          DB_USER=$(echo $SECRET_JSON | jq -r .username)
          DB_PASS=$(echo $SECRET_JSON | jq -r .password)

          # Run the script located on the EC2 instance and capture the command ID
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids i-0c27818662c8919c3 \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id mysql_password_setup --query SecretString --output text --region us-east-1)",
              "DB_USER=$(echo $SECRET_JSON | jq -r .username)",
              "DB_PASS=$(echo $SECRET_JSON | jq -r .password)",
              "/mysql/mysql-query-automation/query.sh $DB_USER $DB_PASS"
            ]' \
            --timeout-seconds 3600 \
            --query 'Command.CommandId' --output text)

          echo "SSM Command ID: $COMMAND_ID"

      - name: Wait for SSM command to complete and fetch output
        run: |
          # Check if the COMMAND_ID is empty
          if [ -z "$COMMAND_ID" ]; then
            echo "ERROR: COMMAND_ID is empty. Exiting."
            exit 1
          fi

          # Wait for the SSM command to complete (can be a bit more dynamic based on actual needs)
          echo "Waiting for SSM command to complete..."
          STATUS="Pending"
          RETRIES=0
          MAX_RETRIES=10  # Maximum retries to check if command is complete
          while [ "$STATUS" != "Success" ] && [ "$RETRIES" -lt "$MAX_RETRIES" ]; do
            # Fetch the status of the command execution
            STATUS=$(aws ssm list-command-invocations \
              --command-id $COMMAND_ID \
              --query "CommandInvocations[0].Status" \
              --output text)

            echo "Current SSM command status: $STATUS"
            if [ "$STATUS" == "Failed" ]; then
              echo "SSM command failed."
              exit 1
            fi

            # Wait before checking again
            sleep 10
            RETRIES=$((RETRIES + 1))
          done

          if [ "$STATUS" == "Success" ]; then
            # Fetch the output of the command using the stored CommandId
            OUTPUT=$(aws ssm list-command-invocations \
              --command-id $COMMAND_ID \
              --query "CommandInvocations[0].CommandPlugins[0].Output" \
              --output text)

            echo "SSM Command Output: $OUTPUT"
          else
            echo "SSM command did not complete successfully after $MAX_RETRIES retries."
            exit 1
          fi
